{"version":3,"sources":["components/TodoComponents/Broadcast/TodoForm.tsx","components/TodoComponents/Broadcast/Todo.tsx","components/TodoComponents/Broadcast/TodoList.tsx","components/TodoComponents/Local/TodoForm.tsx","components/TodoComponents/Local/Todo.tsx","components/TodoComponents/Local/local.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoForm","todo","useState","task","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","heandleSubmit","preventDefault","onSubmit","id","uuidV4","Form","className","Control","type","placeholder","name","onChange","ref","Button","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","isCompleted","edit","setEdit","undefined","map","index","isComplete","TodoList","UniversalState","key","initialState","option","setTodos","test","newTodos","todoId","newValue","text","TaskUpdated","find","values","updatedTodos","removeArr","filter","Local","App","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b498f587.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { Button, Form } from 'react-bootstrap';\nimport { v4 as uuidV4 } from 'uuid'\n\nexport interface TodoFormProps {\n  task?: task,\n  onSubmit: ({id, value}: {id: string | number, value: string}) => void;\n}\n\nexport interface task {\n  id: string | number | null\n  value: string\n  isCompleted: boolean\n}\n\n\nexport const TodoForm = (todo: TodoFormProps) => {\n\n  const [input, setInput] = useState(todo.task ? todo.task.value : '');\n\n  const inputRef = useRef<any>(null);\n\n  useEffect(() => {\n      inputRef.current?.focus();\n  });\n\n  const handleChange = (e: any )=>{\n      setInput(e.target.value)\n  }\n  const heandleSubmit = (e: any) => {\n      e.preventDefault();\n\n      todo.onSubmit({\n          id: uuidV4(),\n          value: input\n      })\n\n      setInput('')\n  }\n\n\n  return (\n      <div>\n          <Form className='todo__form' onSubmit={heandleSubmit}>\n              {todo.task ? (\n                  <>\n                  <Form.Control\n                      type='text' \n                      value={input}\n                      placeholder=\"update\"\n                      name=\"text\"\n                      className='todo__input edit'\n                      onChange={handleChange}\n                      ref={inputRef}\n                  />\n\n                  <Button onClick={heandleSubmit} className='todo__button edit'>Add todo</Button>\n              </>\n\n              ) :  (\n                  <>\n                  <Form.Control\n                      type='text' \n                      value={input}\n                      placeholder=\"add a todo\"\n                      name=\"text\"\n                      className='todo__input'\n                      onChange={handleChange}\n                      ref={inputRef}\n                  />\n\n                  <Button onClick={heandleSubmit} className='todo__button'>Add todo</Button>\n                  </>\n             )\n              }\n\n          </Form>\n      </div>\n  )\n}\n","import React, { useState } from 'react'\nimport  './Todo.css'\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport { TodoForm } from './TodoForm';\n\nexport const Todo = ({ todos, completeTodo, removeTodo, updateTodo }: any) => {\n  const [edit, setEdit] = useState<{ id: null | string | number, value: string, isCompleted: boolean }>({\n    id: '',\n    value: '',\n    isCompleted: false\n  })\n\n  const submitUpdate = ({ id, value }: { id: string | number | null, value: string }) => {\n    updateTodo(edit.id, value);\n    setEdit({\n      id: '',\n      value: '',\n      isCompleted: false,\n    });\n  };\n\n  if (edit.id) {\n    return <TodoForm task={edit} onSubmit={submitUpdate} />;\n  }\n\n  return (\n    <>\n    { todos!== undefined ?\n        todos?.map((todo: { id: string | number, value: string, isComplete: boolean }, index: number) => (\n          <div\n            className={todo.isComplete ? 'todo__row complete' : 'todo__row'}\n            key={index}\n          >\n              <div key={todo.id} onClick={() => completeTodo(todo.id)}\n                className=\"todo__task\"\n              >\n                {todo.value}\n              </div>\n\n              <div className=\"icons\">\n                <RiCloseCircleLine\n                  onClick={() => removeTodo(todo.id)}\n                  className='delete-icon'\n                />\n                <TiEdit\n                  onClick={() => setEdit({ id: todo.id, value: todo.value, isCompleted: false })}\n                  className='edit-icon'\n                />\n              </div>\n\n          </div>)): null\n\n    }\n    </>\n  )\n  \n\n\n\n}\n","import { UniversalState } from \"hook-cross-tab/lib\";\nimport React from \"react\";\nimport { Todo } from \"./Todo\";\nimport { TodoForm } from \"./TodoForm\";\n\nexport const TodoList = () => {\n  const [todos, setTodos] = UniversalState({key:\"tareas\",initialState: [], option: \"broadcast\"})\n  const add = (todo: any) => {\n    if (!todo.value || /^\\s*$/.test(todo.value)) {\n      return;\n    }\n\n    const newTodos = [todo, ...todos];\n\n    setTodos(newTodos);\n  };\n\n  const updateTodo = (todoId: string, newValue: any) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    let TaskUpdated= [...todos].find((todo) => todo.id === todoId);\n    TaskUpdated.values = newValue\n    setTodos(TaskUpdated)\n  };\n\n  const removeTodo = (id: Number) => {\n    const removeArr = [...todos].filter((todo) => todo.id !== id);\n\n    setTodos(removeArr);\n  };\n\n  const completeTodo = (id: string) => {\n    let updatedTodos = todos.map((todo: any) => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n\n      return todo;\n    });\n\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <div>\n      <h1>broadcast props</h1>\n      <TodoForm onSubmit={add} />\n    {todos ?\n      <Todo\n        todos={todos}\n        updateTodo={updateTodo}\n        completeTodo={completeTodo}\n        removeTodo={removeTodo}\n      />: null\n    }\n\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Button, Form } from 'react-bootstrap';\nimport { v4 as uuidV4 } from 'uuid'\n\nexport interface TodoFormProps {\n  task?: task,\n  onSubmit: ({id, value}: {id: string | number, value: string}) => void;\n}\n\nexport interface task {\n  id: string | number | null\n  value: string\n  isCompleted: boolean\n}\n\n\nexport const TodoForm = (todo: TodoFormProps) => {\n\n  const [input, setInput] = useState(todo.task ? todo.task.value : '');\n\n  const inputRef = useRef<any>(null);\n\n  useEffect(() => {\n      inputRef.current?.focus();\n  });\n\n  const handleChange = (e: any )=>{\n      setInput(e.target.value)\n  }\n  const heandleSubmit = (e: any) => {\n      e.preventDefault();\n\n      todo.onSubmit({\n          id: uuidV4(),\n          value: input\n      })\n\n      setInput('')\n  }\n\n\n  return (\n      <div>\n          <Form className='todo__form' onSubmit={heandleSubmit}>\n              {todo.task ? (\n                  <>\n                  <Form.Control\n                      type='text' \n                      value={input}\n                      placeholder=\"update\"\n                      name=\"text\"\n                      className='todo__input edit'\n                      onChange={handleChange}\n                      ref={inputRef}\n                  />\n\n                  <Button onClick={heandleSubmit} className='todo__button edit'>Add todo</Button>\n              </>\n\n              ) :  (\n                  <>\n                  <Form.Control\n                      type='text' \n                      value={input}\n                      placeholder=\"add a todo\"\n                      name=\"text\"\n                      className='todo__input'\n                      onChange={handleChange}\n                      ref={inputRef}\n                  />\n\n                  <Button onClick={heandleSubmit} className='todo__button'>Add todo</Button>\n                  </>\n             )\n              }\n\n          </Form>\n      </div>\n  )\n}\n","import React, { useState } from 'react'\nimport  './Todo.css'\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport { TodoForm } from './TodoForm';\n\nexport const Todo = ({ todos, completeTodo, removeTodo, updateTodo }: any) => {\n  const [edit, setEdit] = useState<{ id: null | string | number, value: string, isCompleted: boolean }>({\n    id: '',\n    value: '',\n    isCompleted: false\n  })\n\n  const submitUpdate = ({ id, value }: { id: string | number | null, value: string }) => {\n    updateTodo(edit.id, value);\n    setEdit({\n      id: '',\n      value: '',\n      isCompleted: false,\n    });\n  };\n\n  if (edit.id) {\n    return <TodoForm task={edit} onSubmit={submitUpdate} />;\n  }\n\n  return (\n    <>\n    { todos!== undefined ?\n        todos?.map((todo: { id: string | number, value: string, isComplete: boolean }, index: number) => (\n          <div\n            className={todo.isComplete ? 'todo__row complete' : 'todo__row'}\n            key={index}\n          >\n              <div key={todo.id} onClick={() => completeTodo(todo.id)}\n                className=\"todo__task\"\n              >\n                {todo.value}\n              </div>\n\n              <div className=\"icons\">\n                <RiCloseCircleLine\n                  onClick={() => removeTodo(todo.id)}\n                  className='delete-icon'\n                />\n                <TiEdit\n                  onClick={() => setEdit({ id: todo.id, value: todo.value, isCompleted: false })}\n                  className='edit-icon'\n                />\n              </div>\n\n          </div>)): null\n\n    }\n    </>\n  )\n  \n\n\n\n}\n","import { UniversalState } from \"hook-cross-tab/lib\";\nimport React from \"react\";\nimport { Todo } from \"./Todo\";\nimport { TodoForm } from \"./TodoForm\";\n\nexport const Local = () => {\n  const [todos, setTodos] = UniversalState({key:\"tareas\",initialState: [], option: \"local\"})\n  const add = (todo: any) => {\n    if (!todo.value || /^\\s*$/.test(todo.value)) {\n      return;\n    }\n\n    const newTodos = [todo, ...todos];\n\n    setTodos(newTodos);\n  };\n\n  const updateTodo = (todoId: string, newValue: any) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    let TaskUpdated= [...todos].find((todo) => todo.id === todoId);\n    TaskUpdated.values = newValue\n    setTodos(TaskUpdated)\n  };\n\n  const removeTodo = (id: Number) => {\n    const removeArr = [...todos].filter((todo) => todo.id !== id);\n\n    setTodos(removeArr);\n  };\n\n  const completeTodo = (id: string) => {\n    let updatedTodos = todos.map((todo: any) => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n\n      return todo;\n    });\n\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <div>\n      <h1>local props</h1>\n      <TodoForm onSubmit={add} />\n    {todos ?\n      <Todo\n        todos={todos}\n        updateTodo={updateTodo}\n        completeTodo={completeTodo}\n        removeTodo={removeTodo}\n      />: null\n    }\n\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport { TodoList } from \"./components/TodoComponents/Broadcast/TodoList\";\nimport { Local } from \"./components/TodoComponents/Local/local\";\n\nimport { WithoutHookCrossTab } from \"./components/TodoComponents/without/WithoutHookCrossTab\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Link to=\"/\">with broadcast</Link>\n        <br />\n        <Link to=\"/local\">with localStore</Link>\n        <br />\n        {/* <Link to=\"/free\">free</Link> */}\n        <Switch>\n          <Route path=\"/local\">\n            <Local />\n          </Route>\n\n          <Route path=\"/\">\n            <TodoList />\n          </Route>\n          {/*         \n        <Route path=\"/free\">\n          <WithoutHookCrossTab/>\n        </Route> */}\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}